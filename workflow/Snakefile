#Snakefile

from snakemake.io import glob_wildcards
import sys
configfile: "../config/config.yaml"

min_len = config["min_len"]
qc = config["qc"]


rule all:
    input:
        expand("result/reports/{sample}_report.txt", folder=config["folder"],
               sample=glob_wildcards(config["folder"] + "/{sample}.fastq")[0]),
        expand("result/reports/{sample}_result.txt", folder=config["folder"],
               sample=glob_wildcards(config["folder"] + "/{sample}.fastq")[0])



rule porechop:
    input:
        files=lambda wildcards: config['folder'] + "/{sample}.fastq"
    output:
        "result/{sample}_trimmed.fastq"
    conda:
        "envs/porechop.yaml"
    shell:
        "porechop -i {input.files} -o {output}"

 

rule nanofilt:
    input:
        "result/{sample}_trimmed.fastq"
    output:
        "result/{sample}_filtered.fastq"
    params:
        min_len=int(config["min_len"]),
        qc=int(config["qc"])
    conda:
        "envs/nanofilt.yaml"
    shell:
        "NanoFilt -l {params.min_len} -q {params.qc} < {input} > {output}"


rule centrifuge:
    input:
        "result/{sample}_filtered.fastq"
    output:
        report="result/reports/{sample}_report.txt",
        result="result/reports/{sample}_result.txt"
    params:
        centrifuge_db=config["centrifuge_db"]  
    conda:
        "envs/centrifuge.yaml"
    shell:
        "centrifuge -x {params.centrifuge_db} -U {input} -p 16 --report-file {output.report} -S {output.result}"




#rule bwa_mapping:
#    input:
#        reference="human_reference.fasta",
#        reads="result/{sample}_filtered.fastq"
#    output:
#        "result/{sample}_mapped.bam"
#    shell:
#        "bwa mem {input.reference} {input.reads} | samtools view -Sb - > {output}"      
        

